// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v4.22.0
// source: order.proto

package proto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type OrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentPage int32  `protobuf:"varint,1,opt,name=currentPage,proto3" json:"currentPage,omitempty"`
	PageSize    int32  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Ordid       string `protobuf:"bytes,3,opt,name=ordid,proto3" json:"ordid,omitempty"`
	Mtlno       string `protobuf:"bytes,4,opt,name=mtlno,proto3" json:"mtlno,omitempty"`
	Prodline    string `protobuf:"bytes,5,opt,name=prodline,proto3" json:"prodline,omitempty"`
	Site        string `protobuf:"bytes,6,opt,name=site,proto3" json:"site,omitempty"`
}

func (x *OrderRequest) Reset() {
	*x = OrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderRequest) ProtoMessage() {}

func (x *OrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderRequest.ProtoReflect.Descriptor instead.
func (*OrderRequest) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{0}
}

func (x *OrderRequest) GetCurrentPage() int32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *OrderRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *OrderRequest) GetOrdid() string {
	if x != nil {
		return x.Ordid
	}
	return ""
}

func (x *OrderRequest) GetMtlno() string {
	if x != nil {
		return x.Mtlno
	}
	return ""
}

func (x *OrderRequest) GetProdline() string {
	if x != nil {
		return x.Prodline
	}
	return ""
}

func (x *OrderRequest) GetSite() string {
	if x != nil {
		return x.Site
	}
	return ""
}

type OrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Acct            string  `protobuf:"bytes,1,opt,name=acct,proto3" json:"acct,omitempty"`
	Acctclose       string  `protobuf:"bytes,2,opt,name=acctclose,proto3" json:"acctclose,omitempty"`
	Addcost         float32 `protobuf:"fixed32,3,opt,name=addcost,proto3" json:"addcost,omitempty"`
	Addcostx        float32 `protobuf:"fixed32,4,opt,name=addcostx,proto3" json:"addcostx,omitempty"`
	Allowsplit      string  `protobuf:"bytes,5,opt,name=allowsplit,proto3" json:"allowsplit,omitempty"`
	Assaypercentage float32 `protobuf:"fixed32,6,opt,name=assaypercentage,proto3" json:"assaypercentage,omitempty"`
	Autoplan        string  `protobuf:"bytes,7,opt,name=autoplan,proto3" json:"autoplan,omitempty"`
	Baseid          string  `protobuf:"bytes,8,opt,name=baseid,proto3" json:"baseid,omitempty"`
	Batch           string  `protobuf:"bytes,9,opt,name=batch,proto3" json:"batch,omitempty"`
	Bdnup           string  `protobuf:"bytes,10,opt,name=bdnup,proto3" json:"bdnup,omitempty"`
	Bdnvar          float32 `protobuf:"fixed32,11,opt,name=bdnvar,proto3" json:"bdnvar,omitempty"`
	Bomcode         string  `protobuf:"bytes,12,opt,name=bomcode,proto3" json:"bomcode,omitempty"`
	Bookedqty       float32 `protobuf:"fixed32,13,opt,name=bookedqty,proto3" json:"bookedqty,omitempty"`
	Boqty           float32 `protobuf:"fixed32,14,opt,name=boqty,proto3" json:"boqty,omitempty"`
	Erpbuffer       string  `protobuf:"bytes,15,opt,name=erpbuffer,proto3" json:"erpbuffer,omitempty"`
	Chooseprint     string  `protobuf:"bytes,16,opt,name=chooseprint,proto3" json:"chooseprint,omitempty"`
	Commitdate      string  `protobuf:"bytes,17,opt,name=commitdate,proto3" json:"commitdate,omitempty"`
	Compqty         float32 `protobuf:"fixed32,18,opt,name=compqty,proto3" json:"compqty,omitempty"`
	Costcenter      string  `protobuf:"bytes,19,opt,name=costcenter,proto3" json:"costcenter,omitempty"`
	CreateTime      string  `protobuf:"bytes,20,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	CreateUser      string  `protobuf:"bytes,21,opt,name=create_user,json=createUser,proto3" json:"create_user,omitempty"`
	Cumlotid        string  `protobuf:"bytes,22,opt,name=cumlotid,proto3" json:"cumlotid,omitempty"`
	Docid           string  `protobuf:"bytes,23,opt,name=docid,proto3" json:"docid,omitempty"`
	Erpdomain       string  `protobuf:"bytes,24,opt,name=erpdomain,proto3" json:"erpdomain,omitempty"`
	Dr              string  `protobuf:"bytes,25,opt,name=dr,proto3" json:"dr,omitempty"`
	Draw            string  `protobuf:"bytes,26,opt,name=draw,proto3" json:"draw,omitempty"`
	Dueenddate      string  `protobuf:"bytes,27,opt,name=dueenddate,proto3" json:"dueenddate,omitempty"`
	Enddate         string  `protobuf:"bytes,28,opt,name=enddate,proto3" json:"enddate,omitempty"`
	Engcode         string  `protobuf:"bytes,29,opt,name=engcode,proto3" json:"engcode,omitempty"`
	Erpprechar1     string  `protobuf:"bytes,30,opt,name=erpprechar1,proto3" json:"erpprechar1,omitempty"`
	Erpprechar2     string  `protobuf:"bytes,31,opt,name=erpprechar2,proto3" json:"erpprechar2,omitempty"`
	Erpprechar3     string  `protobuf:"bytes,32,opt,name=erpprechar3,proto3" json:"erpprechar3,omitempty"`
	Erpprechar4     string  `protobuf:"bytes,33,opt,name=erpprechar4,proto3" json:"erpprechar4,omitempty"`
	Erppredate1     string  `protobuf:"bytes,34,opt,name=erppredate1,proto3" json:"erppredate1,omitempty"`
	Erppredate2     string  `protobuf:"bytes,35,opt,name=erppredate2,proto3" json:"erppredate2,omitempty"`
	Erppredec1      float32 `protobuf:"fixed32,36,opt,name=erppredec1,proto3" json:"erppredec1,omitempty"`
	Erppredec2      float32 `protobuf:"fixed32,37,opt,name=erppredec2,proto3" json:"erppredec2,omitempty"`
	Erppredec3      float32 `protobuf:"fixed32,38,opt,name=erppredec3,proto3" json:"erppredec3,omitempty"`
	Erppreint1      int64   `protobuf:"varint,39,opt,name=erppreint1,proto3" json:"erppreint1,omitempty"`
	Erppreint2      int64   `protobuf:"varint,40,opt,name=erppreint2,proto3" json:"erppreint2,omitempty"`
	Expiredate      string  `protobuf:"bytes,41,opt,name=expiredate,proto3" json:"expiredate,omitempty"`
	Ficlosedate     string  `protobuf:"bytes,42,opt,name=ficlosedate,proto3" json:"ficlosedate,omitempty"`
	Flccostcenter   string  `protobuf:"bytes,43,opt,name=flccostcenter,proto3" json:"flccostcenter,omitempty"`
	Flracct         string  `protobuf:"bytes,44,opt,name=flracct,proto3" json:"flracct,omitempty"`
	Flrsub          string  `protobuf:"bytes,45,opt,name=flrsub,proto3" json:"flrsub,omitempty"`
	Fsmtype         string  `protobuf:"bytes,46,opt,name=fsmtype,proto3" json:"fsmtype,omitempty"`
	Glbdnsign       string  `protobuf:"bytes,47,opt,name=glbdnsign,proto3" json:"glbdnsign,omitempty"`
	Gllbrsign       string  `protobuf:"bytes,48,opt,name=gllbrsign,proto3" json:"gllbrsign,omitempty"`
	Grade           string  `protobuf:"bytes,49,opt,name=grade,proto3" json:"grade,omitempty"`
	Id              string  `protobuf:"bytes,50,opt,name=id,proto3" json:"id,omitempty"`
	Isssite         string  `protobuf:"bytes,51,opt,name=isssite,proto3" json:"isssite,omitempty"`
	Jointtype       string  `protobuf:"bytes,52,opt,name=jointtype,proto3" json:"jointtype,omitempty"`
	Laborcost       float32 `protobuf:"fixed32,53,opt,name=laborcost,proto3" json:"laborcost,omitempty"`
	Laborcostx      float32 `protobuf:"fixed32,54,opt,name=laborcostx,proto3" json:"laborcostx,omitempty"`
	LastModified    string  `protobuf:"bytes,55,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	LastModifyUser  string  `protobuf:"bytes,56,opt,name=last_modify_user,json=lastModifyUser,proto3" json:"last_modify_user,omitempty"`
	Lastrcddate     string  `protobuf:"bytes,57,opt,name=lastrcddate,proto3" json:"lastrcddate,omitempty"`
	Lbrup           string  `protobuf:"bytes,58,opt,name=lbrup,proto3" json:"lbrup,omitempty"`
	Lbrvar          float32 `protobuf:"fixed32,59,opt,name=lbrvar,proto3" json:"lbrvar,omitempty"`
	Leadtime        int64   `protobuf:"varint,60,opt,name=leadtime,proto3" json:"leadtime,omitempty"`
	Linessqe        float32 `protobuf:"fixed32,61,opt,name=linessqe,proto3" json:"linessqe,omitempty"`
	Erplocation     string  `protobuf:"bytes,62,opt,name=erplocation,proto3" json:"erplocation,omitempty"`
	Lotnext         string  `protobuf:"bytes,63,opt,name=lotnext,proto3" json:"lotnext,omitempty"`
	Memo            string  `protobuf:"bytes,64,opt,name=memo,proto3" json:"memo,omitempty"`
	Mixvar          float32 `protobuf:"fixed32,65,opt,name=mixvar,proto3" json:"mixvar,omitempty"`
	Mthdvar         float32 `protobuf:"fixed32,66,opt,name=mthdvar,proto3" json:"mthdvar,omitempty"`
	Mtlcost         float32 `protobuf:"fixed32,67,opt,name=mtlcost,proto3" json:"mtlcost,omitempty"`
	Mtlcostx        float32 `protobuf:"fixed32,68,opt,name=mtlcostx,proto3" json:"mtlcostx,omitempty"`
	Mtlno           string  `protobuf:"bytes,69,opt,name=mtlno,proto3" json:"mtlno,omitempty"`
	Mtlvar          float32 `protobuf:"fixed32,70,opt,name=mtlvar,proto3" json:"mtlvar,omitempty"`
	Mvaracct        string  `protobuf:"bytes,71,opt,name=mvaracct,proto3" json:"mvaracct,omitempty"`
	Mvarcc          string  `protobuf:"bytes,72,opt,name=mvarcc,proto3" json:"mvarcc,omitempty"`
	Mvarsubacct     string  `protobuf:"bytes,73,opt,name=mvarsubacct,proto3" json:"mvarsubacct,omitempty"`
	Mvrracct        string  `protobuf:"bytes,74,opt,name=mvrracct,proto3" json:"mvrracct,omitempty"`
	Mvrrcc          string  `protobuf:"bytes,75,opt,name=mvrrcc,proto3" json:"mvrrcc,omitempty"`
	Mvrrsubacct     string  `protobuf:"bytes,76,opt,name=mvrrsubacct,proto3" json:"mvrrsubacct,omitempty"`
	Myldvar         float32 `protobuf:"fixed32,77,opt,name=myldvar,proto3" json:"myldvar,omitempty"`
	Needdate        string  `protobuf:"bytes,78,opt,name=needdate,proto3" json:"needdate,omitempty"`
	Needtime        int64   `protobuf:"varint,79,opt,name=needtime,proto3" json:"needtime,omitempty"`
	Oldid           string  `protobuf:"bytes,80,opt,name=oldid,proto3" json:"oldid,omitempty"`
	Orddate         string  `protobuf:"bytes,81,opt,name=orddate,proto3" json:"orddate,omitempty"`
	Orderno         string  `protobuf:"bytes,82,opt,name=orderno,proto3" json:"orderno,omitempty"`
	Orderprint      string  `protobuf:"bytes,83,opt,name=orderprint,proto3" json:"orderprint,omitempty"`
	Ordid           string  `protobuf:"bytes,84,opt,name=ordid,proto3" json:"ordid,omitempty"`
	Ordqty          float32 `protobuf:"fixed32,85,opt,name=ordqty,proto3" json:"ordqty,omitempty"`
	Ordtype         string  `protobuf:"bytes,86,opt,name=ordtype,proto3" json:"ordtype,omitempty"`
	Erpoutput       float32 `protobuf:"fixed32,87,opt,name=erpoutput,proto3" json:"erpoutput,omitempty"`
	Overheadcost    float32 `protobuf:"fixed32,88,opt,name=overheadcost,proto3" json:"overheadcost,omitempty"`
	Overheadcostx   float32 `protobuf:"fixed32,89,opt,name=overheadcostx,proto3" json:"overheadcostx,omitempty"`
	Perdate         string  `protobuf:"bytes,90,opt,name=perdate,proto3" json:"perdate,omitempty"`
	Prechar1        string  `protobuf:"bytes,91,opt,name=prechar1,proto3" json:"prechar1,omitempty"`
	Prechar2        string  `protobuf:"bytes,92,opt,name=prechar2,proto3" json:"prechar2,omitempty"`
	Prechar3        string  `protobuf:"bytes,93,opt,name=prechar3,proto3" json:"prechar3,omitempty"`
	Prechar4        string  `protobuf:"bytes,94,opt,name=prechar4,proto3" json:"prechar4,omitempty"`
	Prechar5        string  `protobuf:"bytes,95,opt,name=prechar5,proto3" json:"prechar5,omitempty"`
	Precompqty      float32 `protobuf:"fixed32,96,opt,name=precompqty,proto3" json:"precompqty,omitempty"`
	Predate1        string  `protobuf:"bytes,97,opt,name=predate1,proto3" json:"predate1,omitempty"`
	Predate2        string  `protobuf:"bytes,98,opt,name=predate2,proto3" json:"predate2,omitempty"`
	Predec1         float32 `protobuf:"fixed32,99,opt,name=predec1,proto3" json:"predec1,omitempty"`
	Predec2         float32 `protobuf:"fixed32,100,opt,name=predec2,proto3" json:"predec2,omitempty"`
	Predec3         float32 `protobuf:"fixed32,101,opt,name=predec3,proto3" json:"predec3,omitempty"`
	Predec4         float32 `protobuf:"fixed32,102,opt,name=predec4,proto3" json:"predec4,omitempty"`
	Prescrapqty     float32 `protobuf:"fixed32,103,opt,name=prescrapqty,proto3" json:"prescrapqty,omitempty"`
	Priority        string  `protobuf:"bytes,104,opt,name=priority,proto3" json:"priority,omitempty"`
	Process         string  `protobuf:"bytes,105,opt,name=process,proto3" json:"process,omitempty"`
	Prodline        string  `protobuf:"bytes,106,opt,name=prodline,proto3" json:"prodline,omitempty"`
	Productrate     float32 `protobuf:"fixed32,107,opt,name=productrate,proto3" json:"productrate,omitempty"`
	Projectcode     string  `protobuf:"bytes,108,opt,name=projectcode,proto3" json:"projectcode,omitempty"`
	Qtytype         string  `protobuf:"bytes,109,opt,name=qtytype,proto3" json:"qtytype,omitempty"`
	Queuepercentage float32 `protobuf:"fixed32,110,opt,name=queuepercentage,proto3" json:"queuepercentage,omitempty"`
	Receiveqty      float32 `protobuf:"fixed32,111,opt,name=receiveqty,proto3" json:"receiveqty,omitempty"`
	Recpstatus      string  `protobuf:"bytes,112,opt,name=recpstatus,proto3" json:"recpstatus,omitempty"`
	Erpreference    string  `protobuf:"bytes,113,opt,name=erpreference,proto3" json:"erpreference,omitempty"`
	Rejectcost      float32 `protobuf:"fixed32,114,opt,name=rejectcost,proto3" json:"rejectcost,omitempty"`
	Reldate         string  `protobuf:"bytes,115,opt,name=reldate,proto3" json:"reldate,omitempty"`
	Rev             string  `protobuf:"bytes,116,opt,name=rev,proto3" json:"rev,omitempty"`
	Rjctqty         float32 `protobuf:"fixed32,117,opt,name=rjctqty,proto3" json:"rjctqty,omitempty"`
	Schedulecode    string  `protobuf:"bytes,118,opt,name=schedulecode,proto3" json:"schedulecode,omitempty"`
	Seqno           int64   `protobuf:"varint,119,opt,name=seqno,proto3" json:"seqno,omitempty"`
	Serial          string  `protobuf:"bytes,120,opt,name=serial,proto3" json:"serial,omitempty"`
	Serno           string  `protobuf:"bytes,121,opt,name=serno,proto3" json:"serno,omitempty"`
	Setuptime       int64   `protobuf:"varint,122,opt,name=setuptime,proto3" json:"setuptime,omitempty"`
	Shift           float32 `protobuf:"fixed32,123,opt,name=shift,proto3" json:"shift,omitempty"`
	Singlesign      string  `protobuf:"bytes,124,opt,name=singlesign,proto3" json:"singlesign,omitempty"`
	Site            string  `protobuf:"bytes,125,opt,name=site,proto3" json:"site,omitempty"`
	Sojob           string  `protobuf:"bytes,126,opt,name=sojob,proto3" json:"sojob,omitempty"`
	Staclosedate    string  `protobuf:"bytes,127,opt,name=staclosedate,proto3" json:"staclosedate,omitempty"`
	Stacloseuserid  string  `protobuf:"bytes,128,opt,name=stacloseuserid,proto3" json:"stacloseuserid,omitempty"`
	Startdate       string  `protobuf:"bytes,129,opt,name=startdate,proto3" json:"startdate,omitempty"`
	Status          string  `protobuf:"bytes,130,opt,name=status,proto3" json:"status,omitempty"`
	Subacct         string  `protobuf:"bytes,131,opt,name=subacct,proto3" json:"subacct,omitempty"`
	Subvar          float32 `protobuf:"fixed32,132,opt,name=subvar,proto3" json:"subvar,omitempty"`
	Svaracct        string  `protobuf:"bytes,133,opt,name=svaracct,proto3" json:"svaracct,omitempty"`
	Svarcc          string  `protobuf:"bytes,134,opt,name=svarcc,proto3" json:"svarcc,omitempty"`
	Svarsubacct     string  `protobuf:"bytes,135,opt,name=svarsubacct,proto3" json:"svarsubacct,omitempty"`
	Svrracct        string  `protobuf:"bytes,136,opt,name=svrracct,proto3" json:"svrracct,omitempty"`
	Svrrcc          string  `protobuf:"bytes,137,opt,name=svrrcc,proto3" json:"svrrcc,omitempty"`
	Svrrsubacct     string  `protobuf:"bytes,138,opt,name=svrrsubacct,proto3" json:"svrrsubacct,omitempty"`
	Techcode        string  `protobuf:"bytes,139,opt,name=techcode,proto3" json:"techcode,omitempty"`
	TenantId        string  `protobuf:"bytes,140,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	Toolcode        string  `protobuf:"bytes,141,opt,name=toolcode,proto3" json:"toolcode,omitempty"`
	Transfercost    float32 `protobuf:"fixed32,142,opt,name=transfercost,proto3" json:"transfercost,omitempty"`
	Transfercostx   float32 `protobuf:"fixed32,143,opt,name=transfercostx,proto3" json:"transfercostx,omitempty"`
	Unitcost        float32 `protobuf:"fixed32,144,opt,name=unitcost,proto3" json:"unitcost,omitempty"`
	Updatecost      float32 `protobuf:"fixed32,145,opt,name=updatecost,proto3" json:"updatecost,omitempty"`
	Userid1         string  `protobuf:"bytes,146,opt,name=userid1,proto3" json:"userid1,omitempty"`
	Userid2         string  `protobuf:"bytes,147,opt,name=userid2,proto3" json:"userid2,omitempty"`
	Valid           string  `protobuf:"bytes,148,opt,name=valid,proto3" json:"valid,omitempty"`
	Varsign         string  `protobuf:"bytes,149,opt,name=varsign,proto3" json:"varsign,omitempty"`
	Vendorno        string  `protobuf:"bytes,150,opt,name=vendorno,proto3" json:"vendorno,omitempty"`
	Version         int64   `protobuf:"varint,151,opt,name=version,proto3" json:"version,omitempty"`
	Wipcost         float32 `protobuf:"fixed32,152,opt,name=wipcost,proto3" json:"wipcost,omitempty"`
	Xvaracct        string  `protobuf:"bytes,153,opt,name=xvaracct,proto3" json:"xvaracct,omitempty"`
	Xvarcc          string  `protobuf:"bytes,154,opt,name=xvarcc,proto3" json:"xvarcc,omitempty"`
	Xvarsubacct     string  `protobuf:"bytes,155,opt,name=xvarsubacct,proto3" json:"xvarsubacct,omitempty"`
	Summrbnumber    float32 `protobuf:"fixed32,156,opt,name=summrbnumber,proto3" json:"summrbnumber,omitempty"`
	Depcode         string  `protobuf:"bytes,157,opt,name=depcode,proto3" json:"depcode,omitempty"`
	Amountmcv       float32 `protobuf:"fixed32,158,opt,name=amountmcv,proto3" json:"amountmcv,omitempty"`
}

func (x *OrderResponse) Reset() {
	*x = OrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderResponse) ProtoMessage() {}

func (x *OrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderResponse.ProtoReflect.Descriptor instead.
func (*OrderResponse) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{1}
}

func (x *OrderResponse) GetAcct() string {
	if x != nil {
		return x.Acct
	}
	return ""
}

func (x *OrderResponse) GetAcctclose() string {
	if x != nil {
		return x.Acctclose
	}
	return ""
}

func (x *OrderResponse) GetAddcost() float32 {
	if x != nil {
		return x.Addcost
	}
	return 0
}

func (x *OrderResponse) GetAddcostx() float32 {
	if x != nil {
		return x.Addcostx
	}
	return 0
}

func (x *OrderResponse) GetAllowsplit() string {
	if x != nil {
		return x.Allowsplit
	}
	return ""
}

func (x *OrderResponse) GetAssaypercentage() float32 {
	if x != nil {
		return x.Assaypercentage
	}
	return 0
}

func (x *OrderResponse) GetAutoplan() string {
	if x != nil {
		return x.Autoplan
	}
	return ""
}

func (x *OrderResponse) GetBaseid() string {
	if x != nil {
		return x.Baseid
	}
	return ""
}

func (x *OrderResponse) GetBatch() string {
	if x != nil {
		return x.Batch
	}
	return ""
}

func (x *OrderResponse) GetBdnup() string {
	if x != nil {
		return x.Bdnup
	}
	return ""
}

func (x *OrderResponse) GetBdnvar() float32 {
	if x != nil {
		return x.Bdnvar
	}
	return 0
}

func (x *OrderResponse) GetBomcode() string {
	if x != nil {
		return x.Bomcode
	}
	return ""
}

func (x *OrderResponse) GetBookedqty() float32 {
	if x != nil {
		return x.Bookedqty
	}
	return 0
}

func (x *OrderResponse) GetBoqty() float32 {
	if x != nil {
		return x.Boqty
	}
	return 0
}

func (x *OrderResponse) GetErpbuffer() string {
	if x != nil {
		return x.Erpbuffer
	}
	return ""
}

func (x *OrderResponse) GetChooseprint() string {
	if x != nil {
		return x.Chooseprint
	}
	return ""
}

func (x *OrderResponse) GetCommitdate() string {
	if x != nil {
		return x.Commitdate
	}
	return ""
}

func (x *OrderResponse) GetCompqty() float32 {
	if x != nil {
		return x.Compqty
	}
	return 0
}

func (x *OrderResponse) GetCostcenter() string {
	if x != nil {
		return x.Costcenter
	}
	return ""
}

func (x *OrderResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *OrderResponse) GetCreateUser() string {
	if x != nil {
		return x.CreateUser
	}
	return ""
}

func (x *OrderResponse) GetCumlotid() string {
	if x != nil {
		return x.Cumlotid
	}
	return ""
}

func (x *OrderResponse) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

func (x *OrderResponse) GetErpdomain() string {
	if x != nil {
		return x.Erpdomain
	}
	return ""
}

func (x *OrderResponse) GetDr() string {
	if x != nil {
		return x.Dr
	}
	return ""
}

func (x *OrderResponse) GetDraw() string {
	if x != nil {
		return x.Draw
	}
	return ""
}

func (x *OrderResponse) GetDueenddate() string {
	if x != nil {
		return x.Dueenddate
	}
	return ""
}

func (x *OrderResponse) GetEnddate() string {
	if x != nil {
		return x.Enddate
	}
	return ""
}

func (x *OrderResponse) GetEngcode() string {
	if x != nil {
		return x.Engcode
	}
	return ""
}

func (x *OrderResponse) GetErpprechar1() string {
	if x != nil {
		return x.Erpprechar1
	}
	return ""
}

func (x *OrderResponse) GetErpprechar2() string {
	if x != nil {
		return x.Erpprechar2
	}
	return ""
}

func (x *OrderResponse) GetErpprechar3() string {
	if x != nil {
		return x.Erpprechar3
	}
	return ""
}

func (x *OrderResponse) GetErpprechar4() string {
	if x != nil {
		return x.Erpprechar4
	}
	return ""
}

func (x *OrderResponse) GetErppredate1() string {
	if x != nil {
		return x.Erppredate1
	}
	return ""
}

func (x *OrderResponse) GetErppredate2() string {
	if x != nil {
		return x.Erppredate2
	}
	return ""
}

func (x *OrderResponse) GetErppredec1() float32 {
	if x != nil {
		return x.Erppredec1
	}
	return 0
}

func (x *OrderResponse) GetErppredec2() float32 {
	if x != nil {
		return x.Erppredec2
	}
	return 0
}

func (x *OrderResponse) GetErppredec3() float32 {
	if x != nil {
		return x.Erppredec3
	}
	return 0
}

func (x *OrderResponse) GetErppreint1() int64 {
	if x != nil {
		return x.Erppreint1
	}
	return 0
}

func (x *OrderResponse) GetErppreint2() int64 {
	if x != nil {
		return x.Erppreint2
	}
	return 0
}

func (x *OrderResponse) GetExpiredate() string {
	if x != nil {
		return x.Expiredate
	}
	return ""
}

func (x *OrderResponse) GetFiclosedate() string {
	if x != nil {
		return x.Ficlosedate
	}
	return ""
}

func (x *OrderResponse) GetFlccostcenter() string {
	if x != nil {
		return x.Flccostcenter
	}
	return ""
}

func (x *OrderResponse) GetFlracct() string {
	if x != nil {
		return x.Flracct
	}
	return ""
}

func (x *OrderResponse) GetFlrsub() string {
	if x != nil {
		return x.Flrsub
	}
	return ""
}

func (x *OrderResponse) GetFsmtype() string {
	if x != nil {
		return x.Fsmtype
	}
	return ""
}

func (x *OrderResponse) GetGlbdnsign() string {
	if x != nil {
		return x.Glbdnsign
	}
	return ""
}

func (x *OrderResponse) GetGllbrsign() string {
	if x != nil {
		return x.Gllbrsign
	}
	return ""
}

func (x *OrderResponse) GetGrade() string {
	if x != nil {
		return x.Grade
	}
	return ""
}

func (x *OrderResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OrderResponse) GetIsssite() string {
	if x != nil {
		return x.Isssite
	}
	return ""
}

func (x *OrderResponse) GetJointtype() string {
	if x != nil {
		return x.Jointtype
	}
	return ""
}

func (x *OrderResponse) GetLaborcost() float32 {
	if x != nil {
		return x.Laborcost
	}
	return 0
}

func (x *OrderResponse) GetLaborcostx() float32 {
	if x != nil {
		return x.Laborcostx
	}
	return 0
}

func (x *OrderResponse) GetLastModified() string {
	if x != nil {
		return x.LastModified
	}
	return ""
}

func (x *OrderResponse) GetLastModifyUser() string {
	if x != nil {
		return x.LastModifyUser
	}
	return ""
}

func (x *OrderResponse) GetLastrcddate() string {
	if x != nil {
		return x.Lastrcddate
	}
	return ""
}

func (x *OrderResponse) GetLbrup() string {
	if x != nil {
		return x.Lbrup
	}
	return ""
}

func (x *OrderResponse) GetLbrvar() float32 {
	if x != nil {
		return x.Lbrvar
	}
	return 0
}

func (x *OrderResponse) GetLeadtime() int64 {
	if x != nil {
		return x.Leadtime
	}
	return 0
}

func (x *OrderResponse) GetLinessqe() float32 {
	if x != nil {
		return x.Linessqe
	}
	return 0
}

func (x *OrderResponse) GetErplocation() string {
	if x != nil {
		return x.Erplocation
	}
	return ""
}

func (x *OrderResponse) GetLotnext() string {
	if x != nil {
		return x.Lotnext
	}
	return ""
}

func (x *OrderResponse) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *OrderResponse) GetMixvar() float32 {
	if x != nil {
		return x.Mixvar
	}
	return 0
}

func (x *OrderResponse) GetMthdvar() float32 {
	if x != nil {
		return x.Mthdvar
	}
	return 0
}

func (x *OrderResponse) GetMtlcost() float32 {
	if x != nil {
		return x.Mtlcost
	}
	return 0
}

func (x *OrderResponse) GetMtlcostx() float32 {
	if x != nil {
		return x.Mtlcostx
	}
	return 0
}

func (x *OrderResponse) GetMtlno() string {
	if x != nil {
		return x.Mtlno
	}
	return ""
}

func (x *OrderResponse) GetMtlvar() float32 {
	if x != nil {
		return x.Mtlvar
	}
	return 0
}

func (x *OrderResponse) GetMvaracct() string {
	if x != nil {
		return x.Mvaracct
	}
	return ""
}

func (x *OrderResponse) GetMvarcc() string {
	if x != nil {
		return x.Mvarcc
	}
	return ""
}

func (x *OrderResponse) GetMvarsubacct() string {
	if x != nil {
		return x.Mvarsubacct
	}
	return ""
}

func (x *OrderResponse) GetMvrracct() string {
	if x != nil {
		return x.Mvrracct
	}
	return ""
}

func (x *OrderResponse) GetMvrrcc() string {
	if x != nil {
		return x.Mvrrcc
	}
	return ""
}

func (x *OrderResponse) GetMvrrsubacct() string {
	if x != nil {
		return x.Mvrrsubacct
	}
	return ""
}

func (x *OrderResponse) GetMyldvar() float32 {
	if x != nil {
		return x.Myldvar
	}
	return 0
}

func (x *OrderResponse) GetNeeddate() string {
	if x != nil {
		return x.Needdate
	}
	return ""
}

func (x *OrderResponse) GetNeedtime() int64 {
	if x != nil {
		return x.Needtime
	}
	return 0
}

func (x *OrderResponse) GetOldid() string {
	if x != nil {
		return x.Oldid
	}
	return ""
}

func (x *OrderResponse) GetOrddate() string {
	if x != nil {
		return x.Orddate
	}
	return ""
}

func (x *OrderResponse) GetOrderno() string {
	if x != nil {
		return x.Orderno
	}
	return ""
}

func (x *OrderResponse) GetOrderprint() string {
	if x != nil {
		return x.Orderprint
	}
	return ""
}

func (x *OrderResponse) GetOrdid() string {
	if x != nil {
		return x.Ordid
	}
	return ""
}

func (x *OrderResponse) GetOrdqty() float32 {
	if x != nil {
		return x.Ordqty
	}
	return 0
}

func (x *OrderResponse) GetOrdtype() string {
	if x != nil {
		return x.Ordtype
	}
	return ""
}

func (x *OrderResponse) GetErpoutput() float32 {
	if x != nil {
		return x.Erpoutput
	}
	return 0
}

func (x *OrderResponse) GetOverheadcost() float32 {
	if x != nil {
		return x.Overheadcost
	}
	return 0
}

func (x *OrderResponse) GetOverheadcostx() float32 {
	if x != nil {
		return x.Overheadcostx
	}
	return 0
}

func (x *OrderResponse) GetPerdate() string {
	if x != nil {
		return x.Perdate
	}
	return ""
}

func (x *OrderResponse) GetPrechar1() string {
	if x != nil {
		return x.Prechar1
	}
	return ""
}

func (x *OrderResponse) GetPrechar2() string {
	if x != nil {
		return x.Prechar2
	}
	return ""
}

func (x *OrderResponse) GetPrechar3() string {
	if x != nil {
		return x.Prechar3
	}
	return ""
}

func (x *OrderResponse) GetPrechar4() string {
	if x != nil {
		return x.Prechar4
	}
	return ""
}

func (x *OrderResponse) GetPrechar5() string {
	if x != nil {
		return x.Prechar5
	}
	return ""
}

func (x *OrderResponse) GetPrecompqty() float32 {
	if x != nil {
		return x.Precompqty
	}
	return 0
}

func (x *OrderResponse) GetPredate1() string {
	if x != nil {
		return x.Predate1
	}
	return ""
}

func (x *OrderResponse) GetPredate2() string {
	if x != nil {
		return x.Predate2
	}
	return ""
}

func (x *OrderResponse) GetPredec1() float32 {
	if x != nil {
		return x.Predec1
	}
	return 0
}

func (x *OrderResponse) GetPredec2() float32 {
	if x != nil {
		return x.Predec2
	}
	return 0
}

func (x *OrderResponse) GetPredec3() float32 {
	if x != nil {
		return x.Predec3
	}
	return 0
}

func (x *OrderResponse) GetPredec4() float32 {
	if x != nil {
		return x.Predec4
	}
	return 0
}

func (x *OrderResponse) GetPrescrapqty() float32 {
	if x != nil {
		return x.Prescrapqty
	}
	return 0
}

func (x *OrderResponse) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *OrderResponse) GetProcess() string {
	if x != nil {
		return x.Process
	}
	return ""
}

func (x *OrderResponse) GetProdline() string {
	if x != nil {
		return x.Prodline
	}
	return ""
}

func (x *OrderResponse) GetProductrate() float32 {
	if x != nil {
		return x.Productrate
	}
	return 0
}

func (x *OrderResponse) GetProjectcode() string {
	if x != nil {
		return x.Projectcode
	}
	return ""
}

func (x *OrderResponse) GetQtytype() string {
	if x != nil {
		return x.Qtytype
	}
	return ""
}

func (x *OrderResponse) GetQueuepercentage() float32 {
	if x != nil {
		return x.Queuepercentage
	}
	return 0
}

func (x *OrderResponse) GetReceiveqty() float32 {
	if x != nil {
		return x.Receiveqty
	}
	return 0
}

func (x *OrderResponse) GetRecpstatus() string {
	if x != nil {
		return x.Recpstatus
	}
	return ""
}

func (x *OrderResponse) GetErpreference() string {
	if x != nil {
		return x.Erpreference
	}
	return ""
}

func (x *OrderResponse) GetRejectcost() float32 {
	if x != nil {
		return x.Rejectcost
	}
	return 0
}

func (x *OrderResponse) GetReldate() string {
	if x != nil {
		return x.Reldate
	}
	return ""
}

func (x *OrderResponse) GetRev() string {
	if x != nil {
		return x.Rev
	}
	return ""
}

func (x *OrderResponse) GetRjctqty() float32 {
	if x != nil {
		return x.Rjctqty
	}
	return 0
}

func (x *OrderResponse) GetSchedulecode() string {
	if x != nil {
		return x.Schedulecode
	}
	return ""
}

func (x *OrderResponse) GetSeqno() int64 {
	if x != nil {
		return x.Seqno
	}
	return 0
}

func (x *OrderResponse) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *OrderResponse) GetSerno() string {
	if x != nil {
		return x.Serno
	}
	return ""
}

func (x *OrderResponse) GetSetuptime() int64 {
	if x != nil {
		return x.Setuptime
	}
	return 0
}

func (x *OrderResponse) GetShift() float32 {
	if x != nil {
		return x.Shift
	}
	return 0
}

func (x *OrderResponse) GetSinglesign() string {
	if x != nil {
		return x.Singlesign
	}
	return ""
}

func (x *OrderResponse) GetSite() string {
	if x != nil {
		return x.Site
	}
	return ""
}

func (x *OrderResponse) GetSojob() string {
	if x != nil {
		return x.Sojob
	}
	return ""
}

func (x *OrderResponse) GetStaclosedate() string {
	if x != nil {
		return x.Staclosedate
	}
	return ""
}

func (x *OrderResponse) GetStacloseuserid() string {
	if x != nil {
		return x.Stacloseuserid
	}
	return ""
}

func (x *OrderResponse) GetStartdate() string {
	if x != nil {
		return x.Startdate
	}
	return ""
}

func (x *OrderResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *OrderResponse) GetSubacct() string {
	if x != nil {
		return x.Subacct
	}
	return ""
}

func (x *OrderResponse) GetSubvar() float32 {
	if x != nil {
		return x.Subvar
	}
	return 0
}

func (x *OrderResponse) GetSvaracct() string {
	if x != nil {
		return x.Svaracct
	}
	return ""
}

func (x *OrderResponse) GetSvarcc() string {
	if x != nil {
		return x.Svarcc
	}
	return ""
}

func (x *OrderResponse) GetSvarsubacct() string {
	if x != nil {
		return x.Svarsubacct
	}
	return ""
}

func (x *OrderResponse) GetSvrracct() string {
	if x != nil {
		return x.Svrracct
	}
	return ""
}

func (x *OrderResponse) GetSvrrcc() string {
	if x != nil {
		return x.Svrrcc
	}
	return ""
}

func (x *OrderResponse) GetSvrrsubacct() string {
	if x != nil {
		return x.Svrrsubacct
	}
	return ""
}

func (x *OrderResponse) GetTechcode() string {
	if x != nil {
		return x.Techcode
	}
	return ""
}

func (x *OrderResponse) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *OrderResponse) GetToolcode() string {
	if x != nil {
		return x.Toolcode
	}
	return ""
}

func (x *OrderResponse) GetTransfercost() float32 {
	if x != nil {
		return x.Transfercost
	}
	return 0
}

func (x *OrderResponse) GetTransfercostx() float32 {
	if x != nil {
		return x.Transfercostx
	}
	return 0
}

func (x *OrderResponse) GetUnitcost() float32 {
	if x != nil {
		return x.Unitcost
	}
	return 0
}

func (x *OrderResponse) GetUpdatecost() float32 {
	if x != nil {
		return x.Updatecost
	}
	return 0
}

func (x *OrderResponse) GetUserid1() string {
	if x != nil {
		return x.Userid1
	}
	return ""
}

func (x *OrderResponse) GetUserid2() string {
	if x != nil {
		return x.Userid2
	}
	return ""
}

func (x *OrderResponse) GetValid() string {
	if x != nil {
		return x.Valid
	}
	return ""
}

func (x *OrderResponse) GetVarsign() string {
	if x != nil {
		return x.Varsign
	}
	return ""
}

func (x *OrderResponse) GetVendorno() string {
	if x != nil {
		return x.Vendorno
	}
	return ""
}

func (x *OrderResponse) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *OrderResponse) GetWipcost() float32 {
	if x != nil {
		return x.Wipcost
	}
	return 0
}

func (x *OrderResponse) GetXvaracct() string {
	if x != nil {
		return x.Xvaracct
	}
	return ""
}

func (x *OrderResponse) GetXvarcc() string {
	if x != nil {
		return x.Xvarcc
	}
	return ""
}

func (x *OrderResponse) GetXvarsubacct() string {
	if x != nil {
		return x.Xvarsubacct
	}
	return ""
}

func (x *OrderResponse) GetSummrbnumber() float32 {
	if x != nil {
		return x.Summrbnumber
	}
	return 0
}

func (x *OrderResponse) GetDepcode() string {
	if x != nil {
		return x.Depcode
	}
	return ""
}

func (x *OrderResponse) GetAmountmcv() float32 {
	if x != nil {
		return x.Amountmcv
	}
	return 0
}

type OrderListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentPage int32            `protobuf:"varint,1,opt,name=currentPage,proto3" json:"currentPage,omitempty"`
	PageSize    int32            `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Total       int32            `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Data        []*OrderResponse `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *OrderListResponse) Reset() {
	*x = OrderListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderListResponse) ProtoMessage() {}

func (x *OrderListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderListResponse.ProtoReflect.Descriptor instead.
func (*OrderListResponse) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{2}
}

func (x *OrderListResponse) GetCurrentPage() int32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *OrderListResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *OrderListResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *OrderListResponse) GetData() []*OrderResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_order_proto protoreflect.FileDescriptor

var file_order_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x01,
	0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x74, 0x6c, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x74, 0x6c, 0x6e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x22, 0xca, 0x23, 0x0a, 0x0d, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x63,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x63, 0x63, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x63, 0x63, 0x74, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x74, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x63, 0x6f, 0x73,
	0x74, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x64, 0x64, 0x63, 0x6f, 0x73,
	0x74, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x61, 0x79, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x61, 0x73, 0x73,
	0x61, 0x79, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x75, 0x74, 0x6f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x75, 0x74, 0x6f, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x73, 0x65,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x73, 0x65, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x64, 0x6e, 0x75, 0x70, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x64, 0x6e, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x64, 0x6e, 0x76, 0x61, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x62, 0x64,
	0x6e, 0x76, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6f, 0x6d, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6f, 0x6d, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x71, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x71, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x6f, 0x71, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x62, 0x6f, 0x71,
	0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x70, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x70, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x71, 0x74, 0x79, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x71, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x73, 0x74, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x6d, 0x6c, 0x6f, 0x74, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x6d, 0x6c, 0x6f, 0x74, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f,
	0x63, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x70, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x70, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x64, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x64, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x72, 0x61, 0x77, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x72,
	0x61, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x75, 0x65, 0x65, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x75, 0x65, 0x65, 0x6e, 0x64, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x67, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x6e, 0x67, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x72, 0x70, 0x70, 0x72, 0x65,
	0x63, 0x68, 0x61, 0x72, 0x31, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x72, 0x70,
	0x70, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x31, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x72, 0x70, 0x70,
	0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x32, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65,
	0x72, 0x70, 0x70, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x32, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x72,
	0x70, 0x70, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x33, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x65, 0x72, 0x70, 0x70, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x33, 0x12, 0x20, 0x0a, 0x0b,
	0x65, 0x72, 0x70, 0x70, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x34, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x65, 0x72, 0x70, 0x70, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x34, 0x12, 0x20,
	0x0a, 0x0b, 0x65, 0x72, 0x70, 0x70, 0x72, 0x65, 0x64, 0x61, 0x74, 0x65, 0x31, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x72, 0x70, 0x70, 0x72, 0x65, 0x64, 0x61, 0x74, 0x65, 0x31,
	0x12, 0x20, 0x0a, 0x0b, 0x65, 0x72, 0x70, 0x70, 0x72, 0x65, 0x64, 0x61, 0x74, 0x65, 0x32, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x72, 0x70, 0x70, 0x72, 0x65, 0x64, 0x61, 0x74,
	0x65, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x72, 0x70, 0x70, 0x72, 0x65, 0x64, 0x65, 0x63, 0x31,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x65, 0x72, 0x70, 0x70, 0x72, 0x65, 0x64, 0x65,
	0x63, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x72, 0x70, 0x70, 0x72, 0x65, 0x64, 0x65, 0x63, 0x32,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x65, 0x72, 0x70, 0x70, 0x72, 0x65, 0x64, 0x65,
	0x63, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x72, 0x70, 0x70, 0x72, 0x65, 0x64, 0x65, 0x63, 0x33,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x65, 0x72, 0x70, 0x70, 0x72, 0x65, 0x64, 0x65,
	0x63, 0x33, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x72, 0x70, 0x70, 0x72, 0x65, 0x69, 0x6e, 0x74, 0x31,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x72, 0x70, 0x70, 0x72, 0x65, 0x69, 0x6e,
	0x74, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x72, 0x70, 0x70, 0x72, 0x65, 0x69, 0x6e, 0x74, 0x32,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x72, 0x70, 0x70, 0x72, 0x65, 0x69, 0x6e,
	0x74, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x6c, 0x63, 0x63, 0x6f, 0x73, 0x74, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x6c, 0x63,
	0x63, 0x6f, 0x73, 0x74, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c,
	0x72, 0x61, 0x63, 0x63, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x72,
	0x61, 0x63, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6c, 0x72, 0x73, 0x75, 0x62, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6c, 0x72, 0x73, 0x75, 0x62, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x73, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x73, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x6c, 0x62, 0x64, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6c, 0x62, 0x64, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x6c, 0x6c, 0x62, 0x72, 0x73, 0x69, 0x67,
	0x6e, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6c, 0x6c, 0x62, 0x72, 0x73, 0x69,
	0x67, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x73,
	0x69, 0x74, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x73, 0x73, 0x69,
	0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x63, 0x6f, 0x73, 0x74, 0x78, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x63, 0x6f, 0x73, 0x74, 0x78, 0x12, 0x23,
	0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x6c, 0x61, 0x73, 0x74, 0x72, 0x63, 0x64, 0x64, 0x61, 0x74, 0x65, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x72, 0x63, 0x64, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x62, 0x72, 0x75, 0x70, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x62, 0x72, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x62, 0x72, 0x76, 0x61, 0x72, 0x18,
	0x3b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6c, 0x62, 0x72, 0x76, 0x61, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x65, 0x61, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6c, 0x65, 0x61, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x71, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x71, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x72, 0x70, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x72, 0x70, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x74, 0x6e, 0x65,
	0x78, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x74, 0x6e, 0x65, 0x78,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x78, 0x76, 0x61, 0x72, 0x18,
	0x41, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6d, 0x69, 0x78, 0x76, 0x61, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x74, 0x68, 0x64, 0x76, 0x61, 0x72, 0x18, 0x42, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x6d, 0x74, 0x68, 0x64, 0x76, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x74, 0x6c, 0x63, 0x6f,
	0x73, 0x74, 0x18, 0x43, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6d, 0x74, 0x6c, 0x63, 0x6f, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x74, 0x6c, 0x63, 0x6f, 0x73, 0x74, 0x78, 0x18, 0x44, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x74, 0x6c, 0x63, 0x6f, 0x73, 0x74, 0x78, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x74, 0x6c, 0x6e, 0x6f, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x74,
	0x6c, 0x6e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x74, 0x6c, 0x76, 0x61, 0x72, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x6d, 0x74, 0x6c, 0x76, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x76, 0x61, 0x72, 0x61, 0x63, 0x63, 0x74, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x76, 0x61, 0x72, 0x61, 0x63, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x76, 0x61, 0x72, 0x63,
	0x63, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x76, 0x61, 0x72, 0x63, 0x63, 0x12,
	0x20, 0x0a, 0x0b, 0x6d, 0x76, 0x61, 0x72, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x74, 0x18, 0x49,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x76, 0x61, 0x72, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x76, 0x72, 0x72, 0x61, 0x63, 0x63, 0x74, 0x18, 0x4a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x76, 0x72, 0x72, 0x61, 0x63, 0x63, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x76, 0x72, 0x72, 0x63, 0x63, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x76, 0x72, 0x72, 0x63, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x76, 0x72, 0x72, 0x73, 0x75, 0x62,
	0x61, 0x63, 0x63, 0x74, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x76, 0x72, 0x72,
	0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x79, 0x6c, 0x64, 0x76,
	0x61, 0x72, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6d, 0x79, 0x6c, 0x64, 0x76, 0x61,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x64, 0x61, 0x74, 0x65, 0x18, 0x4e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x65, 0x65, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6e, 0x65, 0x65, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x6c, 0x64,
	0x69, 0x64, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x6c, 0x64, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x64, 0x61, 0x74, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x6e, 0x6f, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x6e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x69, 0x64, 0x18, 0x54, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x64,
	0x71, 0x74, 0x79, 0x18, 0x55, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x71, 0x74,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x56, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x72, 0x70, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x57, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x65, 0x72, 0x70, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x76, 0x65,
	0x72, 0x68, 0x65, 0x61, 0x64, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x58, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x6f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x6f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x63, 0x6f, 0x73, 0x74, 0x78, 0x18, 0x59,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x63, 0x6f,
	0x73, 0x74, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x64, 0x61, 0x74, 0x65, 0x18, 0x5a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x65, 0x72, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x31, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65,
	0x63, 0x68, 0x61, 0x72, 0x32, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65,
	0x63, 0x68, 0x61, 0x72, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72,
	0x33, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72,
	0x33, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x34, 0x18, 0x5e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x34, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x35, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x35, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x70, 0x71, 0x74, 0x79, 0x18, 0x60, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x71, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65,
	0x64, 0x61, 0x74, 0x65, 0x31, 0x18, 0x61, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65,
	0x64, 0x61, 0x74, 0x65, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x64, 0x61, 0x74, 0x65,
	0x32, 0x18, 0x62, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x64, 0x61, 0x74, 0x65,
	0x32, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x64, 0x65, 0x63, 0x31, 0x18, 0x63, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x70, 0x72, 0x65, 0x64, 0x65, 0x63, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x65, 0x64, 0x65, 0x63, 0x32, 0x18, 0x64, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x70, 0x72,
	0x65, 0x64, 0x65, 0x63, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x64, 0x65, 0x63, 0x33,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x70, 0x72, 0x65, 0x64, 0x65, 0x63, 0x33, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x64, 0x65, 0x63, 0x34, 0x18, 0x66, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x70, 0x72, 0x65, 0x64, 0x65, 0x63, 0x34, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65,
	0x73, 0x63, 0x72, 0x61, 0x70, 0x71, 0x74, 0x79, 0x18, 0x67, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b,
	0x70, 0x72, 0x65, 0x73, 0x63, 0x72, 0x61, 0x70, 0x71, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x6a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x6b, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x6c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x74, 0x79, 0x74, 0x79, 0x70, 0x65, 0x18, 0x6d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x71, 0x74, 0x79, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x6e,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x71, 0x74, 0x79, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x71, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x70, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x70, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x71, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x72, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6c,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x73, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x76, 0x18, 0x74, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x72, 0x65, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6a, 0x63, 0x74, 0x71, 0x74, 0x79,
	0x18, 0x75, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x72, 0x6a, 0x63, 0x74, 0x71, 0x74, 0x79, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x76, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x71, 0x6e, 0x6f, 0x18, 0x77, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x73, 0x65, 0x71, 0x6e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x72, 0x6e, 0x6f, 0x18, 0x79, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x65, 0x72, 0x6e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x75, 0x70,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x74, 0x75,
	0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x7b,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x68, 0x69, 0x66, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x74, 0x65, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x6f, 0x6a, 0x6f, 0x62, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x6f, 0x6a, 0x6f, 0x62, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x61, 0x74, 0x65, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x80, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x75, 0x73, 0x65, 0x72,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x81, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x17, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x82, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x61, 0x63, 0x63, 0x74, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x61, 0x63, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x76, 0x61, 0x72, 0x18,
	0x84, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x73, 0x75, 0x62, 0x76, 0x61, 0x72, 0x12, 0x1b,
	0x0a, 0x08, 0x73, 0x76, 0x61, 0x72, 0x61, 0x63, 0x63, 0x74, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x76, 0x61, 0x72, 0x61, 0x63, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x06, 0x73,
	0x76, 0x61, 0x72, 0x63, 0x63, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x76,
	0x61, 0x72, 0x63, 0x63, 0x12, 0x21, 0x0a, 0x0b, 0x73, 0x76, 0x61, 0x72, 0x73, 0x75, 0x62, 0x61,
	0x63, 0x63, 0x74, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x76, 0x61, 0x72,
	0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x73, 0x76, 0x72, 0x72, 0x61,
	0x63, 0x63, 0x74, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x76, 0x72, 0x72,
	0x61, 0x63, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x06, 0x73, 0x76, 0x72, 0x72, 0x63, 0x63, 0x18, 0x89,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x76, 0x72, 0x72, 0x63, 0x63, 0x12, 0x21, 0x0a,
	0x0b, 0x73, 0x76, 0x72, 0x72, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x74, 0x18, 0x8a, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x76, 0x72, 0x72, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x74,
	0x12, 0x1b, 0x0a, 0x08, 0x74, 0x65, 0x63, 0x68, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x8b, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x63, 0x68, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x74,
	0x6f, 0x6f, 0x6c, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x6f, 0x6f, 0x6c, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x63, 0x6f, 0x73, 0x74, 0x78, 0x18, 0x8f,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x63,
	0x6f, 0x73, 0x74, 0x78, 0x12, 0x1b, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x63, 0x6f, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x91, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x63, 0x6f,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x31, 0x18, 0x92, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x31, 0x12, 0x19, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x32, 0x18, 0x93, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x32, 0x12, 0x15, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x95, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x61, 0x72, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x1b, 0x0a, 0x08, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x6e, 0x6f, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x6e, 0x6f, 0x12, 0x19, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x07, 0x77, 0x69, 0x70, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x98, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x77, 0x69, 0x70, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x08, 0x78, 0x76, 0x61, 0x72, 0x61, 0x63, 0x63, 0x74, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x78, 0x76, 0x61, 0x72, 0x61, 0x63, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x06, 0x78, 0x76,
	0x61, 0x72, 0x63, 0x63, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x78, 0x76, 0x61,
	0x72, 0x63, 0x63, 0x12, 0x21, 0x0a, 0x0b, 0x78, 0x76, 0x61, 0x72, 0x73, 0x75, 0x62, 0x61, 0x63,
	0x63, 0x74, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x78, 0x76, 0x61, 0x72, 0x73,
	0x75, 0x62, 0x61, 0x63, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x75, 0x6d, 0x6d, 0x72, 0x62,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73,
	0x75, 0x6d, 0x6d, 0x72, 0x62, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x07, 0x64,
	0x65, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x65, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x6d, 0x63, 0x76, 0x18, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x6d, 0x63, 0x76, 0x22, 0x8b, 0x01, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x32, 0x3a, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0d, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_order_proto_rawDescOnce sync.Once
	file_order_proto_rawDescData = file_order_proto_rawDesc
)

func file_order_proto_rawDescGZIP() []byte {
	file_order_proto_rawDescOnce.Do(func() {
		file_order_proto_rawDescData = protoimpl.X.CompressGZIP(file_order_proto_rawDescData)
	})
	return file_order_proto_rawDescData
}

var file_order_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_order_proto_goTypes = []interface{}{
	(*OrderRequest)(nil),      // 0: OrderRequest
	(*OrderResponse)(nil),     // 1: OrderResponse
	(*OrderListResponse)(nil), // 2: OrderListResponse
}
var file_order_proto_depIdxs = []int32{
	1, // 0: OrderListResponse.data:type_name -> OrderResponse
	0, // 1: Order.GetOrderList:input_type -> OrderRequest
	2, // 2: Order.GetOrderList:output_type -> OrderListResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_order_proto_init() }
func file_order_proto_init() {
	if File_order_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_order_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_order_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_order_proto_goTypes,
		DependencyIndexes: file_order_proto_depIdxs,
		MessageInfos:      file_order_proto_msgTypes,
	}.Build()
	File_order_proto = out.File
	file_order_proto_rawDesc = nil
	file_order_proto_goTypes = nil
	file_order_proto_depIdxs = nil
}
